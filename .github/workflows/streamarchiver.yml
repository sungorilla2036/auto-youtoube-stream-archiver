# This is a basic workflow to help you get started with Actions

name: Download And Archive Livestream VOD

concurrency: streamdownloader
# Controls when the workflow will run
on:
  schedule:
    - cron: '*/5 * * * *'  # every 5 minutes

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  download-or-archive:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Cache For Downloaded Livestream
        id: restore-cache
        uses: actions/cache@v3.0.8
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: |
            *.mp4
            *.mkv
            *.part
            *.ytdl
          # An explicit key for restoring and saving the cache
          key: stream-vod

      - name: Upload Cached VOD
        id: upload
        if: steps.restore-cache.outputs.cache-hit == 'true' && (hashFiles('*.mp4') != '' || hashFiles('*.mkv') != '')
        env:
          accesskey: ${{secrets.ACCESS_KEY}}
          secret: ${{secrets.SECRET}}
          bucketname: infrared-vods
        run: |
          file=$(find -type f -name "*.mp4" -or -type f -name "*.mkv");
          fileName=${file:2}
          fileNameEncoded=$(python -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))"  "$fileName")
          echo $fileNameEncoded
          curl -g --location --header 'x-amz-auto-make-bucket:1' --header "authorization: LOW $accesskey:$secret" --upload-file "$file" http://s3.us.archive.org/"$bucketname"/"$fileNameEncoded"

      - name: Clear cache
        if: steps.upload.outcome == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            console.log("About to clear")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              console.log(cache)
              await github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              })
            }
            console.log("Clear completed")
            
      - name: Check Stream Is Live
        env:
          channelid: InfraredShow
        id: livecheck
        if: steps.upload.outcome == 'skipped'
        run: curl -s https://www.youtube.com/c/"$channelid"/live | grep -o '"isLive":true' -c
        continue-on-error: true

      - name: Install dependencies
        id: predownload
        if: steps.livecheck.outcome == 'success'
        run: |
          sudo apt-get install -y ffmpeg
          pip install yt-dlp

      - name: Download livestream
        env:
          channelid: InfraredShow
        if: steps.predownload.outcome == 'success'
        continue-on-error: true
        run: yt-dlp https://www.youtube.com/c/"$channelid"/live --live-from-start -o '%(upload_date)s - %(title)s [%(id)s].%(ext)s' --format-sort res:720
